// Code generated by capnpc-go. DO NOT EDIT.

package calc

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Calculator struct{ Client capnp.Client }

// Calculator_TypeID is the unique identifier for the type Calculator.
const Calculator_TypeID = 0x8b9f4d3ec53b3f22

func (c Calculator) Add(ctx context.Context, params func(Calculator_add_Params) error, opts ...capnp.CallOption) Calculator_add_Results_Promise {
	if c.Client == nil {
		return Calculator_add_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x8b9f4d3ec53b3f22,
			MethodID:      0,
			InterfaceName: "calc/calc.capnp:Calculator",
			MethodName:    "add",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Calculator_add_Params{Struct: s}) }
	}
	return Calculator_add_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Calculator_Server interface {
	Add(Calculator_add) error
}

func Calculator_ServerToClient(s Calculator_Server) Calculator {
	c, _ := s.(server.Closer)
	return Calculator{Client: server.New(Calculator_Methods(nil, s), c)}
}

func Calculator_Methods(methods []server.Method, s Calculator_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8b9f4d3ec53b3f22,
			MethodID:      0,
			InterfaceName: "calc/calc.capnp:Calculator",
			MethodName:    "add",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Calculator_add{c, opts, Calculator_add_Params{Struct: p}, Calculator_add_Results{Struct: r}}
			return s.Add(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	return methods
}

// Calculator_add holds the arguments for a server call to Calculator.add.
type Calculator_add struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Calculator_add_Params
	Results Calculator_add_Results
}

type Calculator_add_Params struct{ capnp.Struct }

// Calculator_add_Params_TypeID is the unique identifier for the type Calculator_add_Params.
const Calculator_add_Params_TypeID = 0xe27b94c04334749b

func NewCalculator_add_Params(s *capnp.Segment) (Calculator_add_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Calculator_add_Params{st}, err
}

func NewRootCalculator_add_Params(s *capnp.Segment) (Calculator_add_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Calculator_add_Params{st}, err
}

func ReadRootCalculator_add_Params(msg *capnp.Message) (Calculator_add_Params, error) {
	root, err := msg.RootPtr()
	return Calculator_add_Params{root.Struct()}, err
}

func (s Calculator_add_Params) String() string {
	str, _ := text.Marshal(0xe27b94c04334749b, s.Struct)
	return str
}

func (s Calculator_add_Params) Numbers() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Int32List{List: p.List()}, err
}

func (s Calculator_add_Params) HasNumbers() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Calculator_add_Params) SetNumbers(v capnp.Int32List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNumbers sets the numbers field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Calculator_add_Params) NewNumbers(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Calculator_add_Params_List is a list of Calculator_add_Params.
type Calculator_add_Params_List struct{ capnp.List }

// NewCalculator_add_Params creates a new list of Calculator_add_Params.
func NewCalculator_add_Params_List(s *capnp.Segment, sz int32) (Calculator_add_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Calculator_add_Params_List{l}, err
}

func (s Calculator_add_Params_List) At(i int) Calculator_add_Params {
	return Calculator_add_Params{s.List.Struct(i)}
}

func (s Calculator_add_Params_List) Set(i int, v Calculator_add_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Calculator_add_Params_List) String() string {
	str, _ := text.MarshalList(0xe27b94c04334749b, s.List)
	return str
}

// Calculator_add_Params_Promise is a wrapper for a Calculator_add_Params promised by a client call.
type Calculator_add_Params_Promise struct{ *capnp.Pipeline }

func (p Calculator_add_Params_Promise) Struct() (Calculator_add_Params, error) {
	s, err := p.Pipeline.Struct()
	return Calculator_add_Params{s}, err
}

type Calculator_add_Results struct{ capnp.Struct }

// Calculator_add_Results_TypeID is the unique identifier for the type Calculator_add_Results.
const Calculator_add_Results_TypeID = 0xb0cbdb9c371b37eb

func NewCalculator_add_Results(s *capnp.Segment) (Calculator_add_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Calculator_add_Results{st}, err
}

func NewRootCalculator_add_Results(s *capnp.Segment) (Calculator_add_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Calculator_add_Results{st}, err
}

func ReadRootCalculator_add_Results(msg *capnp.Message) (Calculator_add_Results, error) {
	root, err := msg.RootPtr()
	return Calculator_add_Results{root.Struct()}, err
}

func (s Calculator_add_Results) String() string {
	str, _ := text.Marshal(0xb0cbdb9c371b37eb, s.Struct)
	return str
}

func (s Calculator_add_Results) Result() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Calculator_add_Results) SetResult(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// Calculator_add_Results_List is a list of Calculator_add_Results.
type Calculator_add_Results_List struct{ capnp.List }

// NewCalculator_add_Results creates a new list of Calculator_add_Results.
func NewCalculator_add_Results_List(s *capnp.Segment, sz int32) (Calculator_add_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Calculator_add_Results_List{l}, err
}

func (s Calculator_add_Results_List) At(i int) Calculator_add_Results {
	return Calculator_add_Results{s.List.Struct(i)}
}

func (s Calculator_add_Results_List) Set(i int, v Calculator_add_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Calculator_add_Results_List) String() string {
	str, _ := text.MarshalList(0xb0cbdb9c371b37eb, s.List)
	return str
}

// Calculator_add_Results_Promise is a wrapper for a Calculator_add_Results promised by a client call.
type Calculator_add_Results_Promise struct{ *capnp.Pipeline }

func (p Calculator_add_Results_Promise) Struct() (Calculator_add_Results, error) {
	s, err := p.Pipeline.Struct()
	return Calculator_add_Results{s}, err
}

const schema_e3d94c5bbb366af5 = "x\xda\x84\xcd/O3A\x18\x04\xf0\x99\xdd\xbd\xf7^" +
	"C\xd3\xcd\xe1\x0a!i\x8a@P\x02\x05\x9a\x94\xc05" +
	"T`hr\x8b%\x88e\xaf\x86\\\xff\xe4\xda*\x04" +
	"\x1f\x00\x83\xc0A\xc2W\xc0c0(>\x01\xe0@\xa2" +
	"\xd1G\xae\x81&`pO\xf2\xcc\xfc\xa6x\xd1\x14\xab" +
	"^_\x00f\xce\xfb\x97\x95\xc3\xad\x87\x9d\xf6\xcd9t" +
	"Qf\x1f'\x9bw\x87\xfbOo\x00\x83y>\x07K" +
	"\xf4\x81`\x91{A;\xbf\xb2\xf7z\xa9~\xfd\xf2x" +
	"\x0bS\"\x01\xe5\x03\xb5\x0d6\x08\x06\xdb\x0c\xc1\xecj" +
	"\xb4\xde\xba\xbf<}\x85.\x11\xf0\xf2R\xed\x88ky" +
	"\xa0\xc3\x10\xcb\x99\xb3\x89[q6\x11\xae\xea\xec\xa07" +
	"h\xb4l\xe2\xc6\x89\x1d\xc9~\x1a\x91FI\x0f\x982" +
	"\xfc\x1e\xd4\xba\x0c\xa1=\xdf\xb7q\xdcdDN!\xf9" +
	"\x1b\xea\xa7U\x1b\xc7\x95\x83\xb03\x1c'\xa3\xa1QR" +
	"\x01\x8a\x80\x9ei\x00\xe6\xbf\xa4\x99\x15\x0c\xd3\xc9\x9b\x0a" +
	"\x82\x0a\x7fs\xd1\x82Mm\xf7\x87\xb6\xfb\xa5U\x04\xcf" +
	"z\xe3\xeeq'\x1d\xb2\x00F\x92\x13\xb5\x00~\x06\x00" +
	"\x00\xff\xff\xc8i[\xf7"

func init() {
	schemas.Register(schema_e3d94c5bbb366af5,
		0x8b9f4d3ec53b3f22,
		0xb0cbdb9c371b37eb,
		0xe27b94c04334749b)
}
